{"ast":null,"code":"var _jsxFileName = \"/Users/ganlintian/Desktop/info_340/HW/project-2-raphaelkyle/src/Card.js\";\nimport React, { Component } from 'react';\nexport class TreeCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = () => {\n      // This will pass the name of the tree back to main.js\n      this.props.selectedTree(this.props.info.name);\n      this.props.treeCallback(this.props.info.name, this.props.info.img);\n    };\n  }\n\n  render() {\n    // Create Cards\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      name: this.props.info.name,\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.props.info.img,\n      alt: this.props.info.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"mt-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }\n    }, this.props.info.name), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }\n    }, this.props.info.description));\n  }\n\n}\nexport class FlowerCard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = () => {\n      // This will pass the name of the flower back to main.js\n      this.props.selectedFlower(this.props.info.name);\n      this.props.flowerCallback(this.props.info.name, this.props.info.img);\n    };\n  }\n\n  render() {\n    // Create Cards\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      name: this.props.info.name,\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.props.info.img,\n      alt: this.props.info.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"mt-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }\n    }, this.props.info.name), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }, this.props.info.description));\n  }\n\n}\nexport class CardList extends Component {\n  constructor(props) {\n    super(props); // Store the selected tree and flower\n\n    this.selectedTree = tree => {\n      this.setState(currentState => {\n        currentState.tree = tree;\n        return currentState;\n      });\n    };\n\n    this.selectedFlower = flower => {\n      this.setState(currentState => {\n        currentState.flower = flower;\n        return currentState;\n      });\n    };\n\n    this.state = {\n      tree: \"\",\n      flower: \"\"\n    };\n  } // Update the tree info in Main.js\n\n\n  render() {\n    // This will create a list of tree cards\n    let treeCards = this.props.info.map(eachInfo => {\n      if (eachInfo.type === \"Tree\") {\n        return /*#__PURE__*/React.createElement(TreeCard, {\n          info: eachInfo,\n          key: eachInfo.id,\n          treeCallback: this.props.treeCallback,\n          selectedTree: this.selectedTree,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 24\n          }\n        });\n      } else {\n        return undefined;\n      }\n    }); // This will create a list of flower cards\n\n    let flowerCards = this.props.info.map(eachInfo => {\n      if (eachInfo.type === \"Flower\") {\n        return /*#__PURE__*/React.createElement(FlowerCard, {\n          info: eachInfo,\n          key: eachInfo.id,\n          flowerCallback: this.props.flowerCallback,\n          selectedFlower: this.selectedFlower,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 24\n          }\n        });\n      } else {\n        return undefined;\n      }\n    });\n    let selectedTree;\n    let selectedFlower; // This will display what user has selected\n\n    if (this.state.tree === undefined | this.state.tree === \"\") {\n      // Shows you the warning message\n      selectedTree = /*#__PURE__*/React.createElement(\"p\", {\n        className: \"text-danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 28\n        }\n      }, \"Please select a type of tree\");\n    } else {\n      selectedTree = /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }\n      }, \"You have selected \", /*#__PURE__*/React.createElement(\"strong\", {\n        className: \"streaks\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 34\n        }\n      }, this.state.tree));\n    }\n\n    if (this.state.flower === undefined | this.state.flower === \"\") {\n      // Shows you the warning message\n      selectedFlower = /*#__PURE__*/React.createElement(\"p\", {\n        className: \"text-danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 30\n        }\n      }, \"Please select a type of flower\");\n    } else {\n      selectedFlower = /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }\n      }, \"You have selected \", /*#__PURE__*/React.createElement(\"strong\", {\n        className: \"streaks\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 34\n        }\n      }, this.state.flower));\n    }\n\n    return (\n      /*#__PURE__*/\n      // This will combine all the tree and flower cards together\n      React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"section\", {\n        className: \"col-sm-12 col-md-9 col-lg-10 scheduleForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        className: \"ml-2 mt-2 mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }\n      }, \"Here are the trees that you can grow:\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"ml-2 mt-2 mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }\n      }, \"Tree will grow every 15 seconds (max: 3)\"), selectedTree, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-pool\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }\n      }, treeCards), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }\n      }), /*#__PURE__*/React.createElement(\"h1\", {\n        className: \"ml-2 mt-3 mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }\n      }, \"Here are the flowers that you can plant:\"), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"ml-2 mt-2 mb-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }\n      }, \"Flower will grow everytime you hit \\\"pause\\\" (max: 20)\"), selectedFlower, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"card-pool\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }\n      }, flowerCards)))\n    );\n  }\n\n}\nexport default class CardPage extends Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // This will display the trees and flowers cards\n      React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(CardList, {\n        info: this.props.info,\n        treeCallback: this.props.treeCallback,\n        flowerCallback: this.props.flowerCallback,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 17\n        }\n      }))\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/ganlintian/Desktop/info_340/HW/project-2-raphaelkyle/src/Card.js"],"names":["React","Component","TreeCard","constructor","props","handleClick","selectedTree","info","name","treeCallback","img","render","description","FlowerCard","selectedFlower","flowerCallback","CardList","tree","setState","currentState","flower","state","treeCards","map","eachInfo","type","id","undefined","flowerCards","CardPage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'; \n\nexport class TreeCard extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleClick = () => {\n        // This will pass the name of the tree back to main.js\n        this.props.selectedTree(this.props.info.name);\n        this.props.treeCallback(this.props.info.name, this.props.info.img);\n    }\n\n    render() {\n        // Create Cards\n        return(\n            <div className=\"card\" name={this.props.info.name} onClick={this.handleClick}>\n                <img src={this.props.info.img} alt={this.props.info.name}/>\n                <h4 className=\"mt-4\">{this.props.info.name}</h4>\n                <p className=\"description\">{this.props.info.description}</p>\n            </div>\n        )\n    }\n}\n\n\nexport class FlowerCard extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleClick = () => {\n        // This will pass the name of the flower back to main.js\n        this.props.selectedFlower(this.props.info.name);\n        this.props.flowerCallback(this.props.info.name, this.props.info.img);\n    }\n\n    render() {\n        // Create Cards\n        return(\n            <div className=\"card\" name={this.props.info.name} onClick={this.handleClick}>\n                <img src={this.props.info.img} alt={this.props.info.name}/>\n                <h4 className=\"mt-4\">{this.props.info.name}</h4>\n                <p className=\"description\">{this.props.info.description}</p>\n            </div>\n        )\n    }\n}\n\n\nexport class CardList extends Component {\n    constructor(props) {\n        super(props);\n        // Store the selected tree and flower\n        this.state =  {\n            tree: \"\",\n            flower: \"\"\n        }\n    }\n    // Update the tree info in Main.js\n    selectedTree = (tree) => {\n        this.setState((currentState) => {\n            currentState.tree = tree;\n            return currentState;\n        })\n    }\n    // Update the flower info in Main.js\n    selectedFlower = (flower) => {\n        this.setState((currentState) => {\n            currentState.flower = flower;\n            return currentState;\n        })\n    }\n\n    render() {\n        // This will create a list of tree cards\n        let treeCards = this.props.info.map((eachInfo) => {\n            if(eachInfo.type === \"Tree\") {\n                return <TreeCard info={eachInfo} key={eachInfo.id} treeCallback={this.props.treeCallback} selectedTree={this.selectedTree}/>\n            } else {\n                return undefined;\n            }\n        });\n\n        // This will create a list of flower cards\n        let flowerCards = this.props.info.map((eachInfo) => {\n            if (eachInfo.type === \"Flower\") {\n                return <FlowerCard info={eachInfo} key={eachInfo.id} flowerCallback={this.props.flowerCallback} selectedFlower={this.selectedFlower}/>\n            } else {\n                return undefined;\n            }\n        });\n\n        let selectedTree;\n        let selectedFlower;\n\n        // This will display what user has selected\n        if (this.state.tree === undefined | this.state.tree === \"\") {\n            // Shows you the warning message\n            selectedTree = <p className=\"text-danger\">Please select a type of tree</p>;\n        } else {\n            selectedTree = \n            <p>You have selected <strong className=\"streaks\">{this.state.tree}</strong></p>\n        }\n\n        if (this.state.flower === undefined | this.state.flower === \"\") {\n            // Shows you the warning message\n            selectedFlower = <p className=\"text-danger\">Please select a type of flower</p>;\n        } else {\n            selectedFlower = \n            <p>You have selected <strong className=\"streaks\">{this.state.flower}</strong></p>\n        }\n\n        return(\n        // This will combine all the tree and flower cards together\n            <div>\n                <section className=\"col-sm-12 col-md-9 col-lg-10 scheduleForm\">\n                    <h1 className=\"ml-2 mt-2 mb-3\">Here are the trees that you can grow:</h1>\n                    <p className=\"ml-2 mt-2 mb-3\">Tree will grow every 15 seconds (max: 3)</p>\n                    {selectedTree}\n                    <div className=\"card-pool\">\n                        {treeCards}\n                    </div>\n\n                    <br />\n\n                    <h1 className=\"ml-2 mt-3 mb-3\">Here are the flowers that you can plant:</h1>\n                    <p className=\"ml-2 mt-2 mb-3\">Flower will grow everytime you hit \"pause\" (max: 20)</p>\n                    {selectedFlower}\n                    <div className=\"card-pool\">\n                        {flowerCards}\n                    </div>\n                </section>\n            </div>\n            \n        )\n    }\n}\n\n\nexport default class CardPage extends Component {\n    constructor() {\n        super();\n    }\n\n    render() {\n\n        return(\n            // This will display the trees and flowers cards\n            <div>\n                <CardList info={this.props.info} treeCallback={this.props.treeCallback} flowerCallback={this.props.flowerCallback}/>\n            </div>\n        );\n    }\n\n}"]},"metadata":{},"sourceType":"module"}